name: Deploy To Dev
on:
  pull_request:
    types: [ labeled ]

jobs:
  lambda_container:
    environment: DEV
    if: ${{ github.event.label.name == 'Deploy To Dev' }}
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Assume Role on Dev Env
        id: assume_role
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_REGION: ${{secrets.AWS_REGION}}
        run: |
          eval $(aws sts assume-role --role-arn arn:aws:iam::869932982124:role/OrganizationAccountAccessRole --role-session-name=dev --query 'join(``, [`export `, `AWS_ACCESS_KEY_ID=`, Credentials.AccessKeyId, ` ; export `, `AWS_SECRET_ACCESS_KEY=`, Credentials.SecretAccessKey, `; export `, `AWS_SESSION_TOKEN=`, Credentials.SessionToken])' --output text)
          echo "::set-output name=AWS_ACCESS_KEY_ID::$AWS_ACCESS_KEY_ID"
          echo "::set-output name=AWS_SECRET_ACCESS_KEY::$AWS_SECRET_ACCESS_KEY"
          echo "::set-output name=AWS_SESSION_TOKEN::$AWS_SESSION_TOKEN"

      - uses: docker/setup-buildx-action@v1

      - name: Login to ECR
        uses: docker/login-action@v2
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.assume_role.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.assume_role.outputs.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ steps.assume_role.outputs.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{secrets.AWS_REGION}}
        with:
          registry: 869932982124.dkr.ecr.us-west-2.amazonaws.com

      - name: Cache Lambda Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache-assignment_engine
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-assignment_engine-dev-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-assignment_engine-dev

      - name: Set ECR Env Vars
        id: set_ecr_vars
        run: |
          export SERVICE_TAG=`echo ${GITHUB_SHA} | cut -c1-8`
          export SERVICE_NAME=assignment_engine
          export ECR_REPO_URL=869932982124.dkr.ecr.us-west-2.amazonaws.com/
          echo "::set-output name=LAMBDA_REPO_URL::${ECR_REPO_URL}${SERVICE_NAME}:${SERVICE_TAG}"

      - name: "Build and Push Lambda Container"
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile-infra
          platforms: linux/amd64
          push: true
          tags: ${{ steps.set_ecr_vars.outputs.LAMBDA_REPO_URL }}
          cache-from: type=local,src=/tmp/.buildx-cache-assignment_engine
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-assignment_engine-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache-assignment_engine
          mv /tmp/.buildx-cache-assignment_engine-new /tmp/.buildx-cache-assignment_engine

  Deploy:
    environment: DEV
    if: ${{ github.event.label.name == 'Deploy To Dev' }}
    runs-on: ubuntu-latest
    needs: [lambda_container]
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Assume Role on Dev Env
        id: assume_role
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_REGION: ${{secrets.AWS_REGION}}
        run: |
          eval $(aws sts assume-role --role-arn arn:aws:iam::869932982124:role/OrganizationAccountAccessRole --role-session-name=dev --query 'join(``, [`export `, `AWS_ACCESS_KEY_ID=`, Credentials.AccessKeyId, ` ; export `, `AWS_SECRET_ACCESS_KEY=`, Credentials.SecretAccessKey, `; export `, `AWS_SESSION_TOKEN=`, Credentials.SessionToken])' --output text)
          echo "::set-output name=AWS_ACCESS_KEY_ID::$AWS_ACCESS_KEY_ID"
          echo "::set-output name=AWS_SECRET_ACCESS_KEY::$AWS_SECRET_ACCESS_KEY"
          echo "::set-output name=AWS_SESSION_TOKEN::$AWS_SESSION_TOKEN"

      - name: Set ECR Env Vars
        id: set_ecr_vars
        run: |
          export SERVICE_TAG=`echo ${GITHUB_SHA} | cut -c1-8`
          export SERVICE_NAME=assignment_engine          
          echo "::set-output name=SERVICE_TAG::$SERVICE_TAG"          

      - name: Terraform Init Upgrade
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.assume_role.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.assume_role.outputs.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ steps.assume_role.outputs.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{secrets.AWS_REGION}}
        working-directory: ./terraform
        run: terraform init -upgrade -backend-config="app-dev.config"
      - name: Terraform Apply
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.assume_role.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.assume_role.outputs.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ steps.assume_role.outputs.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{secrets.AWS_REGION}}
          SERVICE_TAG: ${{ steps.set_ecr_vars.outputs.SERVICE_TAG }}
        run: |
            terraform apply -var-file="dev.tfvars" -var="service_tag=${SERVICE_TAG}" -auto-approve
            echo "finished"